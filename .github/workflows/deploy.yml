name: CI/CD Spring Boot → EC2

# Se déclenche à chaque push sur main
on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # 1) Récupérer le code
      - name: Checkout repo
        uses: actions/checkout@v4

      # 2) Installer Java 17 et compiler
      - name: Setup Java 17
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: '17'
      - name: Build JAR with Maven
        run: |
          mvn clean package -DskipTests
          ls -la target/*.jar

      # 3) Préparer la clé SSH
      - name: Decode SSH key
        run: |
          echo "${{ secrets.EC2_KEY }}" | base64 -d > ec2_key.pem
          chmod 600 ec2_key.pem

      - name: Créer le fichier .env
        run: |
          echo "db_driver=${{ secrets.DB_DRIVER }}" >> .env
          echo "db_host=${{ secrets.DB_HOST }}" >> .env
          echo "db_username=${{ secrets.DB_USERNAME }}" >> .env
          echo "db_password=${{ secrets.DB_PASSWORD }}" >> .env
          echo "JWT_EXPIRATION=${{ secrets.JWT_EXPIRATION }}" >> .env
          echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> .env
          echo "SPRING_PROFILES_ACTIVE=prod" >> .env

      # 4) Déployer sur l’EC2
      - name: Deploy to EC2
        env:
          HOST: api.stockcaisse.com
          USER: ec2-user
        run: |
          # Copier le JAR et Dockerfile sur l'EC2
          scp -o StrictHostKeyChecking=no -i ec2_key.pem target/*.jar $USER@$HOST:/home/$USER/spring.jar
          scp -o StrictHostKeyChecking=no -i ec2_key.pem Dockerfile $USER@$HOST:/home/$USER/Dockerfile

          # Se connecter en SSH et relancer le conteneur Docker
          ssh -o StrictHostKeyChecking=no -i ec2_key.pem $USER@$HOST << EOF
            # Arrêter et supprimer l'ancien conteneur s'il existe
            docker stop spring || true
            docker rm spring   || true

            # Construire l'image Docker nommée spring:latest
            docker build -t spring:latest /home/$USER

            # Lancer le conteneur Docker
            docker run -d --name spring --restart unless-stopped -p 8080:8080  --env-file .env -v spring_data:/data spring:latest
          EOF
